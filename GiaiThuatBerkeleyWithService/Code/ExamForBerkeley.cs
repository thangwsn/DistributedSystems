//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ExamForBerkeleyPortBinding", Namespace="http://berkeley.algorithms/")]
public partial class ExamForBerkeley : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback submitOperationCompleted;
    
    private System.Threading.SendOrPostCallback getInputDataOperationCompleted;
    
    /// <remarks/>
    public ExamForBerkeley() {
        this.Url = "http://chtpt-exercise.herokuapp.com:80/ExamForBerkeley";
    }
    
    /// <remarks/>
    public event submitCompletedEventHandler submitCompleted;
    
    /// <remarks/>
    public event getInputDataCompletedEventHandler getInputDataCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://berkeley.algorithms/", ResponseNamespace="http://berkeley.algorithms/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string submit([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int examId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long questionId, [System.Xml.Serialization.XmlElementAttribute("calibrateMs", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int[] calibrateMs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string correctedDateTime) {
        object[] results = this.Invoke("submit", new object[] {
                    username,
                    password,
                    examId,
                    questionId,
                    calibrateMs,
                    correctedDateTime});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult Beginsubmit(string username, string password, int examId, long questionId, int[] calibrateMs, string correctedDateTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("submit", new object[] {
                    username,
                    password,
                    examId,
                    questionId,
                    calibrateMs,
                    correctedDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public string Endsubmit(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void submitAsync(string username, string password, int examId, long questionId, int[] calibrateMs, string correctedDateTime) {
        this.submitAsync(username, password, examId, questionId, calibrateMs, correctedDateTime, null);
    }
    
    /// <remarks/>
    public void submitAsync(string username, string password, int examId, long questionId, int[] calibrateMs, string correctedDateTime, object userState) {
        if ((this.submitOperationCompleted == null)) {
            this.submitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsubmitOperationCompleted);
        }
        this.InvokeAsync("submit", new object[] {
                    username,
                    password,
                    examId,
                    questionId,
                    calibrateMs,
                    correctedDateTime}, this.submitOperationCompleted, userState);
    }
    
    private void OnsubmitOperationCompleted(object arg) {
        if ((this.submitCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.submitCompleted(this, new submitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://berkeley.algorithms/", ResponseNamespace="http://berkeley.algorithms/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
    public string getInputData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string password, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int examId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long questionId, [System.Xml.Serialization.XmlElementAttribute("memberTimes", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)] out string[] memberTimes) {
        object[] results = this.Invoke("getInputData", new object[] {
                    username,
                    password,
                    examId,
                    questionId});
        memberTimes = ((string[])(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegingetInputData(string username, string password, int examId, long questionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("getInputData", new object[] {
                    username,
                    password,
                    examId,
                    questionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndgetInputData(System.IAsyncResult asyncResult, out string[] memberTimes) {
        object[] results = this.EndInvoke(asyncResult);
        memberTimes = ((string[])(results[1]));
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void getInputDataAsync(string username, string password, int examId, long questionId) {
        this.getInputDataAsync(username, password, examId, questionId, null);
    }
    
    /// <remarks/>
    public void getInputDataAsync(string username, string password, int examId, long questionId, object userState) {
        if ((this.getInputDataOperationCompleted == null)) {
            this.getInputDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInputDataOperationCompleted);
        }
        this.InvokeAsync("getInputData", new object[] {
                    username,
                    password,
                    examId,
                    questionId}, this.getInputDataOperationCompleted, userState);
    }
    
    private void OngetInputDataOperationCompleted(object arg) {
        if ((this.getInputDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.getInputDataCompleted(this, new getInputDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void submitCompletedEventHandler(object sender, submitCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class submitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal submitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
public delegate void getInputDataCompletedEventHandler(object sender, getInputDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class getInputDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal getInputDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string[] memberTimes {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[1]));
        }
    }
}
